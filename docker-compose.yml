version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gideon-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gideon_db
      POSTGRES_USER: gideon
      POSTGRES_PASSWORD: gideon_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - gideon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gideon -d gideon_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database (Local alternative to cloud providers)
  chromadb:
    image: chromadb/chroma:latest
    container_name: gideon-chromadb
    restart: unless-stopped
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - gideon-network
    environment:
      - CHROMA_PORT=8000
      - CHROMA_HOST=0.0.0.0

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../frontend.Dockerfile
    container_name: gideon-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - gideon-network
    environment:
      - REACT_APP_ENVIRONMENT=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gideon-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://gideon:gideon_password_2024@postgres:5432/gideon_db
      - SECRET_KEY=your-production-secret-key-change-this-in-production-2024
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - CHROMA_URL=http://chromadb:8000
      - PORT=8000
      - DEBUG=False
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    networks:
      - gideon-network
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./backend/app:/app/app:ro

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: gideon-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - gideon-network
    depends_on:
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  chromadb_data:
    driver: local

networks:
  gideon-network:
    driver: bridge
